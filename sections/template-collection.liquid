<div class="max-w-7xl mx-auto px-4 py-8">
  <!-- Collection Header -->
  <div class="text-center mb-12">
    <h1 class="text-3xl font-bold text-gray-900 mb-4">{{ collection.title }}</h1>
    {% if collection.description != blank %}
      <div class="text-gray-600 max-w-2xl mx-auto prose prose-sm">
        {{ collection.description }}
      </div>
    {% endif %}
  </div>

  {% if collection.products.size > 0 %}
    <!-- Filter and Sort Bar -->
    <div class="flex flex-col sm:flex-row justify-between items-center mb-8 space-y-4 sm:space-y-0">
      <p class="text-gray-600">
        {{ collection.products.size }} 
        {% if collection.products.size == 1 %}product{% else %}products{% endif %}
      </p>
      
      <!-- Sort Options -->
      {% if section.settings.show_sort %}
        <div class="flex items-center space-x-2">
          <label for="sort-by" class="text-sm font-medium text-gray-700">Sort by:</label>
          <select 
            id="sort-by" 
            class="border border-gray-300 rounded-md px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
            onchange="window.location.href = this.value"
          >
            <option value="{{ collection.url }}?sort_by=manual">Featured</option>
            <option value="{{ collection.url }}?sort_by=best-selling" {% if collection.sort_by == 'best-selling' %}selected{% endif %}>Best Selling</option>
            <option value="{{ collection.url }}?sort_by=title-ascending" {% if collection.sort_by == 'title-ascending' %}selected{% endif %}>A-Z</option>
            <option value="{{ collection.url }}?sort_by=title-descending" {% if collection.sort_by == 'title-descending' %}selected{% endif %}>Z-A</option>
            <option value="{{ collection.url }}?sort_by=price-ascending" {% if collection.sort_by == 'price-ascending' %}selected{% endif %}>Price: Low to High</option>
            <option value="{{ collection.url }}?sort_by=price-descending" {% if collection.sort_by == 'price-descending' %}selected{% endif %}>Price: High to Low</option>
            <option value="{{ collection.url }}?sort_by=created-descending" {% if collection.sort_by == 'created-descending' %}selected{% endif %}>Newest</option>
          </select>
        </div>
      {% endif %}
    </div>

    <!-- Products Grid -->
    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-12">
      {% for product in collection.products %}
        {% render 'product-card', product: product %}
      {% endfor %}
    </div>

    <!-- Pagination -->
    {% if paginate.pages > 1 %}
      <div class="flex justify-center items-center space-x-2">
        {% if paginate.previous %}
          <a 
            href="{{ paginate.previous.url }}" 
            class="px-3 py-2 border border-gray-300 rounded-md hover:bg-gray-50 text-gray-700"
          >
            Previous
          </a>
        {% endif %}

        {% for part in paginate.parts %}
          {% if part.is_link %}
            <a 
              href="{{ part.url }}" 
              class="px-3 py-2 border border-gray-300 rounded-md hover:bg-gray-50 text-gray-700"
            >
              {{ part.title }}
            </a>
          {% else %}
            {% if part.title == paginate.current_page %}
              <span class="px-3 py-2 bg-blue-600 text-white rounded-md">
                {{ part.title }}
              </span>
            {% else %}
              <span class="px-3 py-2 text-gray-500">
                {{ part.title }}
              </span>
            {% endif %}
          {% endif %}
        {% endfor %}

        {% if paginate.next %}
          <a 
            href="{{ paginate.next.url }}" 
            class="px-3 py-2 border border-gray-300 rounded-md hover:bg-gray-50 text-gray-700"
          >
            Next
          </a>
        {% endif %}
      </div>
    {% endif %}

  {% else %}
    <!-- Empty Collection -->
    <div class="text-center py-16">
      <div class="max-w-md mx-auto">
        <div class="mb-6">
          <svg class="w-16 h-16 text-gray-400 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
          </svg>
        </div>
        <h2 class="text-2xl font-bold text-gray-900 mb-2">No products found</h2>
        <p class="text-gray-600 mb-8">This collection is empty or no products match your current filters.</p>
        <a 
          href="{{ routes.all_products_collection_url }}" 
          class="inline-flex items-center px-6 py-3 bg-blue-600 text-white font-medium rounded-md hover:bg-blue-700 transition-colors"
        >
          Shop All Products
        </a>
      </div>
    </div>
  {% endif %}
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Quick Add functionality
  document.querySelectorAll('.quick-add-form').forEach(form => {
    form.addEventListener('submit', function(e) {
      e.preventDefault();
      
      const button = this.querySelector('.quick-add-btn');
      const originalText = button.textContent;
      const formData = new FormData(this);
      
      button.textContent = 'Adding...';
      button.disabled = true;
      
      fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: formData.get('id'),
          quantity: parseInt(formData.get('quantity'))
        })
      })
      .then(response => response.json())
      .then(data => {
        button.textContent = 'Added!';
        button.classList.remove('bg-blue-600', 'hover:bg-blue-700');
        button.classList.add('bg-green-600');
        
        setTimeout(() => {
          button.textContent = originalText;
          button.disabled = false;
          button.classList.remove('bg-green-600');
          button.classList.add('bg-blue-600', 'hover:bg-blue-700');
        }, 1500);
      })
      .catch(error => {
        console.error('Error:', error);
        button.textContent = 'Error';
        button.disabled = false;
        
        setTimeout(() => {
          button.textContent = originalText;
        }, 2000);
      });
    });
  });
});
</script>

{% schema %}
{
  "name": "Collection Main",
  "settings": [
    {
      "type": "header",
      "content": "Collection Settings"
    },
    {
      "type": "checkbox",
      "id": "show_sort",
      "label": "Show Sort Options",
      "default": true
    },
    {
      "type": "range",
      "id": "products_per_page",
      "label": "Products per page",
      "min": 8,
      "max": 50,
      "step": 4,
      "default": 24,
      "info": "This setting will be applied after the next theme update"
    }
  ]
}
{% endschema %}